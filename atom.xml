<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BlackYu&#39;s Blog</title>
  <subtitle>Attitude is everything!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-08T00:20:24.172Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sy</name>
    <email>blacksunyu@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android EditText回车不换行</title>
    <link href="http://yoursite.com/2017/02/28/Android%20EditText%E5%9B%9E%E8%BD%A6%E4%B8%8D%E6%8D%A2%E8%A1%8C/"/>
    <id>http://yoursite.com/2017/02/28/Android EditText回车不换行/</id>
    <published>2017-02-28T01:54:06.000Z</published>
    <updated>2017-06-08T00:20:24.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>有时候我们需要在EditText组件输入完直接点回车进入 回车点击事件中处理相关业务，总是换行很伤脑筋，索性网上搜了一个办法，很实用，在这里记下来。</p>
<p>首先获取组件id：</p>
<p> edt_city= (EditText) findViewById(R.id.edt_city);</p>
<p>然后：<br><a id="more"></a><br>        edt_city.setOnEditorActionListener(new TextView.OnEditorActionListener() {<br>            @Override<br>            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {<br>                return (event.getKeyCode() == KeyEvent.KEYCODE_ENTER);<br>            }<br>        });</p>
<p>setOnEditorActionListener点击软键盘上的回车键才会触发</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;有时候我们需要在EditText组件输入完直接点回车进入 回车点击事件中处理相关业务，总是换行很伤脑筋，索性网上搜了一个办法，很实用，在这里记下来。&lt;/p&gt;
&lt;p&gt;首先获取组件id：&lt;/p&gt;
&lt;p&gt; edt_city= (EditText) findViewById(R.id.edt_city);&lt;/p&gt;
&lt;p&gt;然后：&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android实现一个简单的手电筒</title>
    <link href="http://yoursite.com/2017/02/28/Android%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%89%8B%E7%94%B5%E7%AD%92/"/>
    <id>http://yoursite.com/2017/02/28/Android实现一个简单的手电筒/</id>
    <published>2017-02-28T01:54:06.000Z</published>
    <updated>2017-06-08T00:22:04.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加手机权限"><a href="#添加手机权限" class="headerlink" title="添加手机权限"></a>添加手机权限</h2><pre><code>&lt;uses-permission android:name=&quot;android.permission.FLASHLIGHT&quot;&gt;&lt;/uses-permission&gt;
&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;&gt;&lt;/uses-permission&gt;
&lt;uses-permission android:name=&quot;android.handware.camera&quot;&gt;&lt;/uses-permission&gt;
&lt;uses-permission android:name=&quot;android.handware.autofocus&quot;&gt;&lt;/uses-permission&gt;
</code></pre><a id="more"></a>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><pre><code>&lt;Button
    android:id=&quot;@+id/btn_open&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot;
    /&gt;
</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>import android.app.Activity;
import android.content.Context;
import android.hardware.Camera;
import android.hardware.camera2.CameraManager;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;

public class MainActivity extends Activity {
private Button btn_open;
private boolean status=false;
private CameraManager cm;
private Camera camera;
Camera.Parameters parameters;
MainActivity instance;


@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    instance=this;
    btn_open= (Button) findViewById(R.id.btn_open);
    btn_open.setText(&quot;open&quot;);
    cm= (CameraManager) getSystemService(Context.CAMERA_SERVICE);
    camera=Camera.open();
    btn_open.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if(!status){
                btn_open.setText(&quot;close&quot;);
                status=true;
                new Thread(new TurnOnLight()).start();
            }else{
                parameters=camera.getParameters();
                instance.parameters.setFlashMode(&quot;off&quot;);
                camera.setParameters(instance.parameters);
                btn_open.setText(&quot;open&quot;);
                status=false;
            }
        }
    });
    }

@Override
protected void onDestroy() {
    super.onDestroy();
    camera.stopPreview();
    camera.release();
    camera = null;
}

private class TurnOnLight implements Runnable {
    @Override
    public void run() {
        instance.parameters=instance.camera.getParameters();
        instance.parameters.setFlashMode(&quot;torch&quot;);
        instance.camera.setParameters(instance.parameters);
    }
 }
}
</code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>声明完调用系统硬件后，想要使用闪光灯则要创建CameraManager ,Camera，以及Camera.Parameters对象。顾名思义，前面两个不用解释，Parameters表示相机服务的参数（例如聚焦，闪关灯，滤镜等等的一些相关配置）</p>
<p>具体操作:</p>
<pre><code>CameraManager cm= (CameraManager)getSystemService(Context.CAMERA_SERVICE)
Camera camera=Camera.open();
Camera.Parameters parameter=camera.getParameters();
//打开闪光灯
parameters.setFlashMode(“torch”);//打开
camera.setParameters(paramsters);
//关闭闪光灯
parameters.setFlashMode(“off”);//关闭
camera.setParameters(paramsters);
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;添加手机权限&quot;&gt;&lt;a href=&quot;#添加手机权限&quot; class=&quot;headerlink&quot; title=&quot;添加手机权限&quot;&gt;&lt;/a&gt;添加手机权限&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.FLASHLIGHT&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.CAMERA&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.handware.camera&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.handware.autofocus&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android 点击两次后退键退出程序</title>
    <link href="http://yoursite.com/2017/02/28/android%20%E7%82%B9%E5%87%BB%E4%B8%A4%E6%AC%A1%E5%90%8E%E9%80%80%E9%94%AE%E9%80%80%E5%87%BA%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/02/28/android 点击两次后退键退出程序/</id>
    <published>2017-02-28T01:54:06.000Z</published>
    <updated>2017-06-08T00:23:35.302Z</updated>
    
    <content type="html"><![CDATA[<p>现在大多数应用都有点两次后退键退出程序，防止用户误操作。我觉得这是一个很和谐的设计，和注册输入两次密码防遗忘有着异曲同工之妙，其实生活中大多数行为也有着相似的地方，比如：出门锁门再拧一下，把钱包放口袋再拍一下，敲完代码再回车一下，哈哈，瞎扯了~</p>
<p>下面说正事：</p>
<p>再按一次退出程序</p>
<p>思路是这样的：本质上我们是需要获取两次点击时间的间隔,然后作出逻辑判断。</p>
<p>首先，声明一个第一次点击的时间，设置为0 </p>
<pre><code>private long firstTime=0;
</code></pre><a id="more"></a>
<p>然后获取系统当前时间，减去第一次点击的时间，如果大于两秒，则提示Toast，若小于两秒则退出，执行System.exit(0); </p>
<pre><code>System.currentTimeMillis()-firstTime;
</code></pre><p>第一次点击肯定Toast，不过没关系，我们此时给firstTime赋值为当前时间（第一次点击的时间）</p>
<p>第二点击再用当前时间－firstTime=间隔时间</p>
<p>如果小于两秒，则退出</p>
<pre><code>@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {
    if(keyCode==KeyEvent.KEYCODE_BACK &amp;&amp; event.getAction()==KeyEvent.ACTION_DOWN){
        if((System.currentTimeMillis()-firstTime) &gt; 2000){
            Toast.makeText(getApplicationContext(), &quot;再按一次退出程序&quot;, Toast.LENGTH_SHORT).show();
            firstTime = System.currentTimeMillis();
        } else {
            finish();
            System.exit(0);
        }
        return true;
    }
    return super.onKeyDown(keyCode, event);
}
</code></pre><p>}</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在大多数应用都有点两次后退键退出程序，防止用户误操作。我觉得这是一个很和谐的设计，和注册输入两次密码防遗忘有着异曲同工之妙，其实生活中大多数行为也有着相似的地方，比如：出门锁门再拧一下，把钱包放口袋再拍一下，敲完代码再回车一下，哈哈，瞎扯了~&lt;/p&gt;
&lt;p&gt;下面说正事：&lt;/p&gt;
&lt;p&gt;再按一次退出程序&lt;/p&gt;
&lt;p&gt;思路是这样的：本质上我们是需要获取两次点击时间的间隔,然后作出逻辑判断。&lt;/p&gt;
&lt;p&gt;首先，声明一个第一次点击的时间，设置为0 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private long firstTime=0;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>java入门</title>
    <link href="http://yoursite.com/2017/02/28/java%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/02/28/java入门/</id>
    <published>2017-02-28T01:54:06.000Z</published>
    <updated>2017-03-27T06:41:57.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java简介"><a href="#java简介" class="headerlink" title="java简介"></a>java简介</h3><p>Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由James Gosling和同事们共同研发，并在1995年正式推出。<br><a id="more"></a></p>
<p>java分为三大体系：JavaME、JavaSE、JavaEE</p>
<ul>
<li>JavaME是小规模的嵌入式开发，适合手机等嵌入式设备。</li>
<li>JavaSE是桌面程序开发，桌面应用，和VC的MFC差不多。</li>
<li>JavaEE就很强大了，适合网络服务的开发，有很多框架，主要是Spring和Ejb</li>
</ul>
<hr>
<p>假如你已经安装好了java，并且配置好了环境。</p>
<blockquote>
<p>配置环境作用：可以在dos命令下使用java。</p>
<p>比如查看版本：java -version、编译：javac test.java 、运行：java test.class。</p>
</blockquote>
<hr>
<h3 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h3><p>以下我们通过一个简单的实例来展示 Java 编程，创建文件 Test.java(文件名需与类名一致), 代码如下：</p>
<pre><code>public class Test {
        public static void main(String []args) {
            System.out.println(&quot;Hello World&quot;);
        }
}
</code></pre><p>然后运行+cmd进入dos界面，cd到Test.java目录下：</p>
<pre><code>$ javac Test.java
$ java Test
Hello World
</code></pre><h3 id="执行命令解析"><a href="#执行命令解析" class="headerlink" title="执行命令解析"></a>执行命令解析</h3><p>以上我们使用了两个命令 javac 和 java。</p>
<p>javac 后面跟着的是java文件的文件名，例如 HelloWorld.java。 该命令用于将 java 源文件编译为 class 字节码文件，如： javac HelloWorld.java。</p>
<p>运行javac命令后，如果成功编译没有错误的话，会出现一个 HelloWorld.class 的文件。</p>
<p>java 后面跟着的是java文件中的类名,例如 HelloWorld 就是类名，如: java HelloWorld。</p>
<p>注意：java命令后面不要加.class。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;java简介&quot;&gt;&lt;a href=&quot;#java简介&quot; class=&quot;headerlink&quot; title=&quot;java简介&quot;&gt;&lt;/a&gt;java简介&lt;/h3&gt;&lt;p&gt;Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由James Gosling和同事们共同研发，并在1995年正式推出。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>注解ButterKnife的基本使用</title>
    <link href="http://yoursite.com/2017/02/28/%E6%B3%A8%E8%A7%A3ButterKnife%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/02/28/注解ButterKnife的基本使用/</id>
    <published>2017-02-28T01:54:06.000Z</published>
    <updated>2017-06-08T00:22:51.202Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="http://www.jianshu.com/p/9c37856ddf09" target="_blank" rel="external">http://www.jianshu.com/p/9c37856ddf09</a></p>
<p>ButterKnife的最新版本是8.4.0。</p>
<p>首先，需要导入ButterKnife的jar包。</p>
<p>在AndroidStudio中，File-&gt;Project Structure-&gt;Dependencies-&gt;Library dependency 搜索butterknife即可，第一个就是.<br><a id="more"></a><br>另外一种就是直接在build:grade（app）dependencies里添加：</p>
<blockquote>
<pre><code>compile &apos;com.jakewharton:butterknife:8.4.0&apos;
annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.4.0&apos;
</code></pre></blockquote>
<p>ok，现在正式开始使用吧，用法也很简单<br>在Activity子类的onCreate()方法里使用ButterKnife.bind(this);即可</p>
<blockquote>
<pre><code>protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    ButterKnife.bind(this);
    tv1.setText(&quot;hi!sy&quot;)
</code></pre></blockquote>
<p><strong>注意</strong>：一定要在setContentView之后写。</p>
<p><strong>再然后</strong>，把光标放在<strong>R.layout.activity_main</strong>上，鼠标右击，选中<strong>Generate…(Alt+Insert)</strong>,点击会出现：</p>
<p><img src="http://img.blog.csdn.net/20170110163859957?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3k3NTU3NTQ1ODI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><strong>然后这样</strong><br><img src="http://img.blog.csdn.net/20170111125826322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3k3NTU3NTQ1ODI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>选中的有TextView点击事件和findViewById的注解，点击Confirm就成功了！</p>
<p>什么，你说没有，别着急，你需要安装一个小插件（不要嫌麻烦，其实很简单，一劳永逸）</p>
<p>在AndroidStudio-&gt;File-&gt;Settings-&gt;Plugins-&gt;搜索Zelezny下载添加就行 ，可以快速生成对应组件的实例对象，不用手动写。</p>
<p>使用时，在要导入注解的Activity 或 Fragment 或 ViewHolder的layout资源代码上，右键——&gt;<strong>Generate</strong>——<strong>Generate ButterKnife Injections</strong>。</p>
<p><strong>源码:</strong></p>
<blockquote>
<pre><code>public class MainActivity extends Activity {

    @BindView(R.id.tv_time)
    TextView tvTime;
    @BindView(R.id.activity_main)
    RelativeLayout activityMain;
    @BindView(R.id.tv_cal)
    TextView tvCal;
    @BindView(R.id.tv_date)
    TextView tvDate;
    Time time;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(this);
        tvTime.setText(&quot;Time类&quot;);
        tvCal.setText(&quot;Calender类&quot;);
        tvDate.setText(&quot;Date类&quot;);

        initTime();

    }

    private void initTime() {
        time = new Time();
        time.setToNow();

    }

    @OnClick({R.id.tv_cal, R.id.tv_date,R.id.tv_time})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.tv_time://点击第一个
                String times = time.year + &quot;年&quot; + time.month + &quot;月&quot; + time.monthDay
                        + &quot;日&quot; + time.hour + &quot;时&quot; + time.minute + &quot;分&quot; + time.second + &quot;秒&quot;
                        + &quot;:现在是一年中的第&quot; + time.yearDay + &quot;天&quot;;
                Toast.makeText(this, Time.getCurrentTimezone() + times, Toast.LENGTH_SHORT).show();
                tvTime.setText(times);
                break;
            case R.id.tv_cal:
                break;
            case R.id.tv_date:
                break;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
//        Unbinder unbinder=ButterKnife.bind(this);
//        unbinder.unbind();
        ButterKnife.bind(this).unbind();
    }

}
</code></pre></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考文章：&lt;a href=&quot;http://www.jianshu.com/p/9c37856ddf09&quot;&gt;http://www.jianshu.com/p/9c37856ddf09&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ButterKnife的最新版本是8.4.0。&lt;/p&gt;
&lt;p&gt;首先，需要导入ButterKnife的jar包。&lt;/p&gt;
&lt;p&gt;在AndroidStudio中，File-&amp;gt;Project Structure-&amp;gt;Dependencies-&amp;gt;Library dependency 搜索butterknife即可，第一个就是.&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android 线程错误锦集</title>
    <link href="http://yoursite.com/2017/02/23/Android-%E7%BA%BF%E7%A8%8B%E9%94%99%E8%AF%AF%E9%94%A6%E9%9B%86/"/>
    <id>http://yoursite.com/2017/02/23/Android-线程错误锦集/</id>
    <published>2017-02-23T03:10:19.000Z</published>
    <updated>2017-03-27T06:32:45.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>学Android有一段时间了，一直觉得线程很难，原因大概是不常用吧! 正所谓陌生生难，就像刚刚接触编程都觉得编程不简单一样，多用用就熟悉了。<br>而线程正是Android初级者进阶的一个标志，必须要正面刚！<br><a id="more"></a></p>
<h3 id="问题一：其他线程更新UI。"><a href="#问题一：其他线程更新UI。" class="headerlink" title="问题一：其他线程更新UI。"></a>问题一：其他线程更新UI。</h3><pre><code>private void showTime() {
    new Thread(){
        @Override
        public void run() {
            //月份是从0-11算的，所以显示的话要+1
            String times = time.year + &quot;年&quot; + time.month+1 + &quot;月&quot; + time.monthDay
                    + &quot;日&quot; + time.hour + &quot;时&quot; + time.minute + &quot;分&quot; + time.second + &quot;秒&quot;
                    + &quot;:现在是一年中的第&quot; + time.yearDay + &quot;天&quot;;
            tvTime.setText(times);
        }
    }.start();
</code></pre><blockquote>
<p>报错：Only the original thread that created a view hierarchy can touch its views.</p>
</blockquote>
<p>这个错误很常见，基本上写线程操作都遇到过这个错误。根本原因是view控件的线程安全问题，通俗点讲就是所有的更新UI操作都需要在主线程（也就是UI线程中完成），而不能在新开的子线程中操作。总之一句话——不能在其他线程里更新UI！</p>
<p><strong>解决方案</strong>：</p>
<ol>
<li>在主线程中new一个Handler类（注意导入android.os.Handler;包），并重写handleMessage()方法。</li>
<li>新开启一个线程，将run里面跑的数据交给Message对象，然后将Message对象交给第一步new的handler.sendMessage().</li>
<li>在handlerMessage()方法里给组件赋值，更新UI。</li>
</ol>
<p><strong>看源码</strong>：</p>
<pre><code>Handler handler=new Handler() {//第一步
    @Override
    public void handleMessage(Message msg) {
        switch (msg.what){      //第三步
            case 0x11:
                tvTime.setText(msg.obj.toString());
            break;
        }
    }
};
private void showTime() { //第二步
    new Thread(){
        @Override
        public void run() {
            while (!quit){
//                 等待一秒钟
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                //月份是从0-11算的，所以显示的话要+1
                time.setToNow();

                times = time.year + &quot;年&quot; + time.month+1 + &quot;月&quot; + time.monthDay
                        + &quot;日&quot; + time.hour + &quot;时&quot; + time.minute + &quot;分&quot; + time.second + &quot;秒&quot;
                        + &quot;:现在是一年中的第&quot; + time.yearDay + &quot;天&quot;;
                Message msg=Message.obtain();
                msg.what=0x11;
                msg.obj=times;
                handler.sendMessage(msg);
            }
        }
    }.start();
}
</code></pre><p><strong>我这里是用线程不断显示当前时间，精确到秒。这是主要步骤</strong></p>
<p>待续——</p>
<p><strong>总结</strong>：</p>
<p>大前提：线程分为主线程和其他子线程，每个线程里还都有一个Handler，handler还有looper。规则：只能在主线程（UI线程）中更新UI，子线程只能处理数据。<br>就像一个国家，把资源领土什么的分给各个地方，但是地方必须把产出上交中央，然而并不是直接上交而是通过某个机构，地方也可以有下级，下级上交也是如此。各个不同地方交换数据也是如此，但不能显示数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;学Android有一段时间了，一直觉得线程很难，原因大概是不常用吧! 正所谓陌生生难，就像刚刚接触编程都觉得编程不简单一样，多用用就熟悉了。&lt;br&gt;而线程正是Android初级者进阶的一个标志，必须要正面刚！&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
</feed>
